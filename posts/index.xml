<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Josh Armitage</title>
		<link>https://josharmi.github.io/posts/</link>
		<description>Recent content in Posts on Josh Armitage</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Fri, 29 Jan 2021 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://josharmi.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>Pointing the Way to Serverless Python</title>
			<link>https://josharmi.github.io/posts/pointing-the-way-serverless-python/</link>
			<pubDate>Fri, 29 Jan 2021 00:00:00 +0000</pubDate>
			
			<guid>https://josharmi.github.io/posts/pointing-the-way-serverless-python/</guid>
			<description>Takeaways Today we&amp;rsquo;re going to look at running up the world&amp;rsquo;s simplest Flask app using Cloud Run.
You&amp;rsquo;ll learn:
 How Google Cloud Run makes hosting apps delightfully easy How to write a simple Dockerfile to run your application in Cloud Run How you can leverage Waypoint to make development simple  To skip to the end there&amp;rsquo;s a reference GitHub repository here
The What &amp;amp; Why of Waypoint What is Waypoint In October 2020, Hashicorp announced Waypoint, a new way to simplify your development process.</description>
			<content type="html"><![CDATA[<h2 id="takeaways">Takeaways</h2>
<p>Today we&rsquo;re going to look at running up the world&rsquo;s simplest <a href="https://flask.palletsprojects.com/en/1.1.x/">Flask</a> app using Cloud Run.</p>
<p>You&rsquo;ll learn:</p>
<ul>
<li>How Google Cloud Run makes hosting apps delightfully easy</li>
<li>How to write a simple Dockerfile to run your application in Cloud Run</li>
<li>How you can leverage Waypoint to make development simple</li>
</ul>
<p>To skip to the end there&rsquo;s a reference GitHub repository <a href="">here</a></p>
<h2 id="the-what--why-of-waypoint">The What &amp; Why of Waypoint</h2>
<h3 id="what-is-waypoint">What is Waypoint</h3>
<p>In October 2020, Hashicorp announced Waypoint, a new way to simplify your development process. Rather than bespoke scripting and Makefiles, you can have a consistent experience to your flow. Coupled with a UI that allows you to simply understand who did what when, it&rsquo;s an intriguing proposition for modernising and harmonising across your projects.</p>
<h3 id="3-reasons-why">3 Reasons Why</h3>
<ol>
<li>
<p>Consistent developer experience over bespoke scripting</p>
</li>
<li>
<p>A central UI for understanding who did what when</p>
</li>
<li>
<p>Spend more time writing code vs deploying code</p>
</li>
</ol>
<h2 id="3-reasons-why-google-cloud-run">3 Reasons Why Google Cloud Run</h2>
<ol>
<li>
<p>The simplest way to get your code live and accessible on the cloud</p>
</li>
<li>
<p>Containers give you high levels of environmental consistency, no more &ldquo;works on my machine&rdquo;</p>
</li>
<li>
<p>The first million requests a month are <strong>FREE</strong></p>
</li>
</ol>
<h2 id="takeaways-1">Takeaways</h2>
<p>Today we&rsquo;re going to look at running up the world&rsquo;s simplest <a href="https://flask.palletsprojects.com/en/1.1.x/">Flask</a> app using Cloud Run.</p>
<p>You&rsquo;ll learn:</p>
<ul>
<li>How Google Cloud Run makes hosting apps delightfully easy</li>
<li>How to write a simple Dockerfile to run your application in Cloud Run</li>
<li>How you can leverage Waypoint to make development simple</li>
</ul>
<p>To skip to the end there&rsquo;s a reference GitHub repository <a href="">here</a></p>
<h2 id="prerequisies">Prerequisies</h2>
<h3 id="install-waypoint">Install Waypoint</h3>
<p>Follow the Hashicorp instructions <a href="https://learn.hashicorp.com/tutorials/waypoint/get-started-install">here</a></p>
<h3 id="install-google-cloud-cli">Install Google Cloud CLI</h3>
<p>Follow the Google instructions <a href="https://cloud.google.com/sdk/docs/install">here</a></p>
<h3 id="install-docker">Install Docker</h3>
<p>Follow the Docker instructions <a href="https://docs.docker.com/desktop/#download-and-install">here</a></p>
<h3 id="install-python3-and-pipenv">Install Python3 and Pipenv</h3>
<p>Follow the Python instructions <a href="https://www.python.org/downloads/">here</a></p>
<p>Follow the Pipenv instructions <a href="https://pipenv.pypa.io/en/latest/#install-pipenv-today">here</a></p>
<h2 id="lets-get-started">Let&rsquo;s Get Started</h2>
<h3 id="inital-waypoint-set-up">Inital Waypoint Set Up</h3>
<p>First let&rsquo;s create a new directory to host our app</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">mkdir serverless-python <span class="o">&amp;&amp;</span> <span class="nb">cd</span> serverless-python
</code></pre></div><p>If you haven&rsquo;t already, install a <code>waypoint</code> server into your Docker environment</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">waypoint install --platform<span class="o">=</span>docker -accept-tos
</code></pre></div><p>Now we can initialise <code>waypoint</code></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">waypoint init
</code></pre></div><p>That will have created a <code>waypoint.hcl</code> file that looks like this:</p>
<div class="highlight"><pre class="chroma"><code class="language-hcl" data-lang="hcl"><span class="c1"># The name of your project. A project typically maps 1:1 to a VCS repository.
</span><span class="c1"># This name must be unique for your Waypoint server. If you&#39;re running in
</span><span class="c1"># local mode, this must be unique to your machine.
</span><span class="c1"></span><span class="n">project</span> <span class="o">=</span> <span class="s2">&#34;my-project&#34;</span><span class="c1">
</span><span class="c1">
</span><span class="c1"># Labels can be specified for organizational purposes.
</span><span class="c1"># labels = { &#34;foo&#34; = &#34;bar&#34; }
</span><span class="c1">
</span><span class="c1"># An application to deploy.
</span><span class="c1"></span><span class="k">app</span> <span class="s2">&#34;web&#34;</span> {<span class="c1">
</span><span class="c1">    # Build specifies how an application should be deployed. In this case,
</span><span class="c1">    # we&#39;ll build using a Dockerfile and keeping it in a local registry.
</span><span class="c1"></span>    <span class="k">build</span> {
        <span class="k">use</span> <span class="s2">&#34;docker&#34;</span> {}<span class="c1">
</span><span class="c1">
</span><span class="c1">        # Uncomment below to use a remote docker registry to push your built images.
</span><span class="c1">        #
</span><span class="c1">        # registry {
</span><span class="c1">        #   use &#34;docker&#34; {
</span><span class="c1">        #     image = &#34;registry.example.com/image&#34;
</span><span class="c1">        #     tag   = &#34;latest&#34;
</span><span class="c1">        #   }
</span><span class="c1">        # }
</span><span class="c1"></span>
    }<span class="c1">
</span><span class="c1">
</span><span class="c1">    # Deploy to Docker
</span><span class="c1"></span>    <span class="k">deploy</span> {
        <span class="k">use</span> <span class="s2">&#34;docker&#34;</span> {}
    }
}
</code></pre></div><p>Strip out all the comments:</p>
<pre><code>project = &quot;my-project&quot;

app &quot;web&quot; {
    build {
        use &quot;docker&quot; {}

    }

    deploy {
        use &quot;docker&quot; {}
    }
}
</code></pre><p>Update <code>project</code> to be <code>serverless-python</code> and <code>app</code> to be <code>api</code>:</p>
<div class="highlight"><pre class="chroma"><code class="language-hcl" data-lang="hcl"><span class="n">project</span> <span class="o">=</span> <span class="s2">&#34;serverless-python&#34;</span>

<span class="k">app</span> <span class="s2">&#34;api&#34;</span> {
    <span class="k">build</span> {
        <span class="k">use</span> <span class="s2">&#34;docker&#34;</span> {}

    }

    <span class="k">deploy</span> {
        <span class="k">use</span> <span class="s2">&#34;docker&#34;</span> {}
    }
}
</code></pre></div><h3 id="adding-some-python">Adding Some Python</h3>
<p>Set up our python environment with <code>pipenv</code></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pipenv --three
</code></pre></div><p>Now install the two packages we&rsquo;re going to need, <code>flask</code> and <code>gunicorn</code></p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">pipenv install flask gunicorn
</code></pre></div><p>Create a new <code>app.py</code> file</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">touch app.py
</code></pre></div><p>And fill out with a simple flask app</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>


<span class="nd">@app.route</span><span class="p">(</span><span class="s2">&#34;/&#34;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="s2">&#34;Hello, world!&#34;</span>


<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s2">&#34;0.0.0.0&#34;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">8080</span><span class="p">)</span> <span class="c1"># Setting host and port allow the app to be accessible outside of localhost</span>
</code></pre></div><h3 id="containerisation">Containerisation</h3>
<p>We need a Dockerfile so we can build our image and hoist it up to the cloud</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">FROM</span><span class="s"> python:alpine3.12</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /usr/src/app</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> . .<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> pip install pipenv <span class="o">&amp;&amp;</span> pipenv lock -r &gt; requirements.txt <span class="o">&amp;&amp;</span> pip install -r requirements.txt<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">EXPOSE</span><span class="s"> 8080</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">CMD</span> <span class="nb">exec</span> gunicorn --bind :8080 --workers <span class="m">1</span> --threads <span class="m">8</span> --timeout <span class="m">0</span> app:app<span class="err">
</span></code></pre></div><blockquote>
<p>A critical thing about Cloud Run is that we need to conform to Google&rsquo;s <a href="https://cloud.google.com/run/docs/reference/container-contract"><strong>container contract</strong></a>. For our purposes here, this means we need to listen for requests on <code>0.0.0.0</code> and port <code>8080</code>, which we implement in the <code>CMD</code> statement.</p>
</blockquote>
<p>It&rsquo;s always good practice to add a <code>.dockerignore</code> file to make sure we don&rsquo;t copy unnecessary files into our images, create one now with the below content</p>
<pre><code>Dockerfile
README.md
*.pyc
*.pyo
*.pyd
__pycache__
.pytest_cache
.waypoint
.vscode
</code></pre><p>Now we can try building our container for the first time, first it&rsquo;s worth reinitialising waypoint to make sure it&rsquo;s caught up on all our changes</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">waypoint init
</code></pre></div><p>And then we can run our first build</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">waypoint build
</code></pre></div><p>You should see output of that looks something like this</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">➜ waypoint build
✓ Initializing Docker client...
✓ Building image...
 │  ---&gt; eb7dbc300413
 │ Step 5/6 : EXPOSE <span class="m">8080</span>
 │  ---&gt; Running in da514cb73c55
 │  ---&gt; b3b71fee78ed
 │ Step 6/6 : CMD <span class="nb">exec</span> gunicorn --bind :8080 --workers <span class="m">1</span> --threads <span class="m">8</span> --timeout <span class="m">0</span> ap
 │ p:app
 │  ---&gt; Running in 1455e0b30f65
 │  ---&gt; e9319ce94c71
 │ Successfully built e9319ce94c71
 │ Successfully tagged waypoint.local/api:latest
✓ Injecting Waypoint Entrypoint...
</code></pre></div><p>Great Success!</p>
<p>Now we can run the container locally in docker by running <code>waypoint up</code></p>
<p>You&rsquo;ll get console output that looks like</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">The deploy was successful! A Waypoint deployment URL is shown below. This
can be used internally to check your deployment and is not meant <span class="k">for</span> external
traffic. You can manage this hostname using <span class="s2">&#34;waypoint hostname.&#34;</span>

   Release URL: https://main-lt4ygdndkq-nw.a.run.app
Deployment URL: https://heavily-fitting-piglet--v11.waypoint.run
</code></pre></div><p>And if click to go to the url, you hit an <strong>error page</strong></p>
<p><img src="/static/images/waypoint_error.png" alt=""></p>
<p>Thankfully it&rsquo;s a simple fix</p>
<p>We need to add <code>service_port = 8080</code> to our <code>deploy</code> block</p>
<p>So <code>waypoint.hcl</code> should look like</p>
<div class="highlight"><pre class="chroma"><code class="language-hcl" data-lang="hcl"><span class="n">project</span> <span class="o">=</span> <span class="s2">&#34;serverless-python&#34;</span>

<span class="k">app</span> <span class="s2">&#34;api&#34;</span> {
    <span class="k">build</span> {
        <span class="k">use</span> <span class="s2">&#34;docker&#34;</span> {}

    }

    <span class="k">deploy</span> {
        <span class="k">use</span> <span class="s2">&#34;docker&#34;</span> {
<span class="n">            service_port</span> <span class="o">=</span> <span class="m">8080</span>
        }
    }
}
</code></pre></div><p>And now after running <code>waypoint up</code> again the URL works!</p>
<p>So we&rsquo;ve tested the container works locally, but the goal is to get it up into the cloud.</p>
<p>Let&rsquo;s make sure we&rsquo;re authenticated properly and get a list of projects so we can select a target project</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">gcloud auth application-default login
gcloud projects list
</code></pre></div><p>And let&rsquo;s update our <code>waypoint.hcl</code> file so we deploy to Cloud Run instead of our local docker</p>
<p>Add this to your <code>build</code> block and replace <code>&lt;your-project-name&gt;</code> with your target project</p>
<div class="highlight"><pre class="chroma"><code class="language-hcl" data-lang="hcl">    <span class="k">registry</span> {
      <span class="k">use</span> <span class="s2">&#34;docker&#34;</span> {
<span class="n">        image</span> <span class="o">=</span> <span class="s2">&#34;gcr.io/&lt;your-project-name&gt;/serverless-python&#34;</span>
<span class="n">        tag</span>   <span class="o">=</span> <span class="s2">&#34;latest&#34;</span>
      }
    }
</code></pre></div><p>Now when we build the Docker image, we&rsquo;ll automatically upload it to the Google container registry</p>
<p>Replace your <code>deploy</code> block with and replace <code>&lt;your-project-name&gt;</code> with your target project</p>
<div class="highlight"><pre class="chroma"><code class="language-hcl" data-lang="hcl">    <span class="k">deploy</span> {
        <span class="k">use</span> <span class="s2">&#34;google-cloud-run&#34;</span> {
<span class="n">            project</span>  <span class="o">=</span> <span class="s2">&#34;&lt;your-project-name&gt;&#34;</span>
<span class="n">            location</span> <span class="o">=</span> <span class="s2">&#34;europe-west2&#34;</span>

<span class="n">            port</span> <span class="o">=</span> <span class="m">8080</span>

            <span class="k">capacity</span> {
<span class="n">                memory</span>                     <span class="o">=</span> <span class="m">128</span>
<span class="n">                cpu_count</span>                  <span class="o">=</span> <span class="m">1</span>
<span class="n">                max_requests_per_container</span> <span class="o">=</span> <span class="m">10</span>
<span class="n">                request_timeout</span>            <span class="o">=</span> <span class="m">300</span>
            }

            <span class="k">auto_scaling</span> {
<span class="n">                max</span> <span class="o">=</span> <span class="m">1</span>
            }
        }
    }
</code></pre></div><p>And when we click the URL we are again presented with an <strong>error page</strong></p>
<p><img src="/static/images/waypoint_error.png" alt=""></p>
<p>If we look at the cloud console we can see that our Cloud Run service looks healthy&hellip;</p>
<p><img src="/static/images/cloud_run_status.png" alt=""></p>
<p>Unfortunately, Google is expecting us to authenticate to hit the URL, but we can make it public by adding a <code>release</code> block</p>
<div class="highlight"><pre class="chroma"><code class="language-hcl" data-lang="hcl">    <span class="k">release</span> {
        <span class="k">use</span> <span class="s2">&#34;google-cloud-run&#34;</span> {}
    }
</code></pre></div><p>So our <code>waypoint.hcl</code> now looks like</p>
<div class="highlight"><pre class="chroma"><code class="language-hcl" data-lang="hcl"><span class="n">project</span> <span class="o">=</span> <span class="s2">&#34;serverless-python&#34;</span>

<span class="k">app</span> <span class="s2">&#34;api&#34;</span> {
    <span class="k">build</span> {
        <span class="k">use</span> <span class="s2">&#34;docker&#34;</span> {}

        <span class="k">registry</span> {
            <span class="k">use</span> <span class="s2">&#34;docker&#34;</span> {
<span class="n">                image</span> <span class="o">=</span> <span class="s2">&#34;gcr.io/&lt;your-project-name&gt;/serverless-python&#34;</span>
<span class="n">                tag</span>   <span class="o">=</span> <span class="s2">&#34;latest&#34;</span>
            }
        }
    }

    <span class="k">deploy</span> {
        <span class="k">use</span> <span class="s2">&#34;google-cloud-run&#34;</span> {
<span class="n">            project</span>  <span class="o">=</span> <span class="s2">&#34;&lt;your-project-name&gt;&#34;</span>
<span class="n">            location</span> <span class="o">=</span> <span class="s2">&#34;europe-west2&#34;</span>

<span class="n">            port</span> <span class="o">=</span> <span class="m">8080</span>

            <span class="k">capacity</span> {
<span class="n">                memory</span>                     <span class="o">=</span> <span class="m">128</span>
<span class="n">                cpu_count</span>                  <span class="o">=</span> <span class="m">1</span>
<span class="n">                max_requests_per_container</span> <span class="o">=</span> <span class="m">10</span>
<span class="n">                request_timeout</span>            <span class="o">=</span> <span class="m">300</span>
            }

            <span class="k">auto_scaling</span> {
<span class="n">                max</span> <span class="o">=</span> <span class="m">1</span>
            }
        }
    }

    <span class="k">release</span> {
        <span class="k">use</span> <span class="s2">&#34;google-cloud-run&#34;</span> {}
    }
}
</code></pre></div><p>And if we run <code>waypoint up</code> once more, the console now looks like</p>
<p><img src="/static/images/cloud_run_status2.png" alt=""></p>
<p>By going to the <code>Release URL</code> from the waypoint output we see</p>
<blockquote>
<p><code>Hello, world!</code></p>
</blockquote>
<h2 id="recap">Recap</h2>
<h3 id="cloud-run-is-easy">Cloud Run is easy</h3>
<p>We&rsquo;ve seen how Cloud Run makes it easy to host apps at record speed, and making changes to production code</p>
<h3 id="simple-dockerfile-skeleton">Simple Dockerfile skeleton</h3>
<p>Although the Dockerfile is not hardened for production use, we know have a skeleton that allows us to rapidly build python applications hosted in the cloud</p>
<h3 id="waypoint-makes-for-simple-development-flows">Waypoint makes for simple development flows</h3>
<p>We&rsquo;ve only touched on the basics of waypoint here, but you can see how it provides a consistent experience that makes common tasks truly simple comapred to bespoke bash scripting</p>
<h2 id="cleanup">Cleanup</h2>
<p>Run <code>waypoint destroy</code> to clear up all the resources, and it&rsquo;s always worth double checking in the Google Cloud console to make sure!</p>
]]></content>
		</item>
		
		<item>
			<title>Beginning The Quest For Serverless CQRS &amp; Event Sourcing</title>
			<link>https://josharmi.github.io/posts/serverless-event-sourcing/</link>
			<pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate>
			
			<guid>https://josharmi.github.io/posts/serverless-event-sourcing/</guid>
			<description>The Quest This is the first in a series of blog posts to explore the potential for building serverless event sourced CQRS systems on AWS. First we&amp;rsquo;re going to lay out the whats and the whys of CQRS and event sourcing, some of the constraints we&amp;rsquo;re under and some initial spikes that look promising.
By the end of the quest we hope to have an example repository that you can fork and extend to start your own Serverless CQRS journey of discovery.</description>
			<content type="html"><![CDATA[<h2 id="the-quest">The Quest</h2>
<p>This is the first in a series of blog posts to explore the potential for building serverless event sourced CQRS systems on AWS. First we&rsquo;re going to lay out the whats and the whys of CQRS and event sourcing, some of the constraints we&rsquo;re under and some initial spikes that look promising.</p>
<p>By the end of the quest we hope to have an example repository that you can fork and extend to start your own Serverless CQRS journey of discovery.</p>
<h2 id="why-should-i-care-about-cqrs--event-sourcing">Why should I care about CQRS &amp; Event Sourcing?</h2>
<p>In a general sense, there is always something to learn in any new style of application or architecture. We live in a world of trade-offs and most advancements happen from transferral between domains as opposed to brand new unique insight.</p>
<p>In a more direct sense, I believe CQRS and Event Sourcing are becoming an invaluable tool to have in ones arsenal. Having built a series of systems based on their principles, when presented with high complexity, high value problems it quickly became my default due to repeated success.</p>
<h3 id="why-cqrs">Why CQRS?</h3>
<p>In the early 2000s, Greg Young shared Command Query Responsibility Segregation (CQRS) with the world, a pattern to build scalable, extendable domain driven systems. Over the intervening years interest has trended upwards:</p>
<p><img src="/static/images/CQRS-trend.png" alt="CQRS Trend" title="CQRS Trend"></p>
<p>Not a disimilar trend to Domain Driven Design (DDD) as a whole:</p>
<p><img src="/static/images/DDD-trend.png" alt="DDD Trend" title="DDD Trend"></p>
<p>Two keys reasons that I believe underly this trend are:</p>
<ul>
<li>Scalability is fundamental, businesses rightly expect more of systems, especially with the elasticity that public cloud provides</li>
<li>Legacy systems are impeding progress, they get exponentially harder to work on, CQRS and Event Sourcing provide a journey to break the cycle</li>
</ul>
<h3 id="what-is-cqrs-with-event-sourcing">What is CQRS with Event Sourcing</h3>
<p><img src="/static/images/CQRS.jpg" alt="CQRS High Level Flow" title="CQRS High Level Flow"></p>
<p>Let&rsquo;s look at the data flows through the system first, using a banking app as an example:</p>
<ol>
<li>Commands -&gt; Commands are statements of intent from a user, they can be rejected, and are aimed at a distinct aggregate. Think &ldquo;Deposit Money&rdquo;
<ul>
<li>Aggregate -&gt; Aggregates are an instance of a domain object, Think &ldquo;Josh&rsquo;s Account&rdquo;</li>
</ul>
</li>
<li>Events -&gt; Events are statements of fact, they are persisted forever and cannot be rejected. Think &ldquo;Money Deposited&rdquo;</li>
<li>Queries -&gt; Queries are asking to get data out of the system. Think &ldquo;Get Account Balance&rdquo;</li>
<li>Read Models -&gt; Read Models are an opinion of current state. Rather than have to compute the account balance on demand, we can keep a running tally as events enter the system and present that back</li>
</ol>
<p>Now let&rsquo;s break the individual components:</p>
<ol>
<li>User -&gt; A user of the system, could be a customer, a teller or another system</li>
<li>Command Handler -&gt; Handles the commands to the system</li>
<li>Event Store -&gt; An immutable event ledger</li>
<li>Read Model Populator -&gt; A process which tails the event store and computes read models</li>
<li>Read Model Store -&gt; A fit for purpose store</li>
<li>Query Handler -&gt; Handles queries by accessing read model stores</li>
</ol>
<p>Commands and queries are served from opposite sides, hence segregation.</p>
<p>Now let&rsquo;s look at why this is powerful</p>
<h3 id="the-power-of-relaxing-consistency">The Power of Relaxing Consistency</h3>
<h4 id="strong-vs-eventual-consistency">Strong vs Eventual Consistency</h4>
<p>When it comes to consistency we have two options, one is strong and one is eventual, and they give us different guarantees.</p>
<p>Strong consistency means that for the same question, we get the same answer, in exchange for a performance impact. E.g. AWS DynamoDB strongly consistent reads are twice as expensive and slower than eventually consistent reads.</p>
<p>Eventual consistency means that given enough time, we get the same answer. By embracing this we open up more architectural options.</p>
<p>In CQRS, queries are answered with eventual consistency, as they are &ldquo;opinions&rdquo;</p>
<p>However, commands are handled with strong consistency, as they result in &ldquo;facts&rdquo;</p>
<p>By segregting commands and queries we are able to specifically optimise, where we need stronger guarantees we have them, where we have more freedom we take full advantage.</p>
<h3 id="the-event-store-core">The Event Store Core</h3>
<p>Let&rsquo;s look a bit deeper into event stores.</p>
<p>It is an immutable ledger of events. All data traversing through the system is persisted as events, allowing us to rebuild state on demand.</p>
<h4 id="global-chronological-event-ordering">Global Chronological Event Ordering</h4>
<p>A common event store debate, is whether chronological ordering of events is required.</p>
<p>The key to this discussion is in the mathematical concept of commutativity, i.e. is order important?</p>
<p>If replaying events in any order has the same outcome, then the events are commutative, which removes the need for order.</p>
<p>Within an aggregate, events are nearly always non-commutative, e.g. if I have two events for changing my address, the final state is reliant on processing order.</p>
<p>Across aggregates, you can:</p>
<ol>
<li>design for allowing non-commutative events</li>
<li>design to never have them</li>
<li>sacrifice replay consistency.</li>
</ol>
<p>Number one can be achieved through global ordering
Number two is possible only in highly exceptional edge cases
Number three discards one of the unique properties of the pattern</p>
<h5 id="conclusion">Conclusion</h5>
<p>For the intents of this quest I&rsquo;m going to <strong>include</strong> global ordering for one very simple reason:</p>
<ul>
<li>Having global ordering is an easily reversible decision</li>
<li>Not having global ordering is incredibly difficult, approaching impossible to reverse</li>
</ul>
<h3 id="what-constraints-does-serverless-imply">What Constraints Does Serverless Imply?</h3>
<p>I want to be able build the entire solution using only serverless AWS services, with no idle running cost.</p>
<p>For compute the obvious option is Lambda functions, event sourcing marries well with event driven, and we can front them with REST APIs to allow us to interact with the system. The more interesting choices are for our event store, in terms of serverless databases on AWS we have:</p>
<ul>
<li><strong>Serverless Aurora</strong></li>
<li><strong>DynamoDB</strong></li>
<li><strong>Quantum Ledger Database</strong></li>
<li>Timestream</li>
<li>Neptune</li>
<li>Keyspaces</li>
</ul>
<p>The first three databases are on first inspection the most interesting.</p>
<p>Next time we&rsquo;ll be investigating using Serverless Aurora, as a full SQL database means we are on well trodden paths, before branching off into experimental options.</p>
]]></content>
		</item>
		
		<item>
			<title>Three Tips For Lambda Layers</title>
			<link>https://josharmi.github.io/posts/lambda-layers/</link>
			<pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
			
			<guid>https://josharmi.github.io/posts/lambda-layers/</guid>
			<description>The Three Tips  Consider and manage your layer lifecycle Don&amp;rsquo;t prematurely optimise Consider different ways to decompose  What Is A Lambda Layer? Layers are a mechanism by which you can have common code available to an array of AWS lambda functions. They&amp;rsquo;re a simple enough thing to set up:
MyLayer: Type: &amp;quot;AWS::Lambda::LayerVersion&amp;quot; Properties: Description: Common code for reuse LayerName: CommonCodeLayer CompatibleRuntimes: - python3.7 Content: layer Then you can use it in a serverless function by:</description>
			<content type="html"><![CDATA[<h2 id="the-three-tips">The Three Tips</h2>
<ol>
<li>Consider and manage your layer lifecycle</li>
<li>Don&rsquo;t prematurely optimise</li>
<li>Consider different ways to decompose</li>
</ol>
<h2 id="what-is-a-lambda-layer">What Is A Lambda Layer?</h2>
<p>Layers are a mechanism by which you can have common code available to an array of AWS lambda functions. They&rsquo;re a simple enough thing to set up:</p>
<pre><code>MyLayer:
    Type: &quot;AWS::Lambda::LayerVersion&quot;
    Properties:
        Description: Common code for reuse
        LayerName: CommonCodeLayer
        CompatibleRuntimes:
            - python3.7
        Content: layer
</code></pre><p>Then you can use it in a serverless function by:</p>
<pre><code>lambdaFunction:
    Type: &quot;AWS::Lambda::Function&quot;
    Properties:
        Code: lambda
        FunctionName: FunctionWithLayer
        Handler: function.handler
        MemorySize: 128
        Role: !Ref LambdaRole
        Runtime: python3.7
        Layers:
            - !Ref MyLayer
</code></pre><h2 id="dunning-kruger--lambda-layers">Dunning-Kruger &amp; Lambda Layers</h2>
<p>When getting started is so quick and simple as it often is with true serverless development, the speed at which you move can come with debts accrued through the best intentions.</p>
<p>A common journey to discovering layers is where you&rsquo;ve written a collection of functions that operate as a microservice, and all of sudden you hit copy paste one too many times and you know there must be a better way. You find the notion of layers and a lightbulb goes off, you split your code off into a layer, drop the resource into your CloudFormation and hey presto, the dream of reuse has become reality. Day 1 is a wonderful thing, the problem feels solved and you move onto the next.</p>
<p>Then comes day 2, you need to make a change the layer, but now it&rsquo;s shared across 10, 20, 30 functions, <a href="https://www.hyrumslaw.com/">Hyrum&rsquo;s Law</a> has become manifest. You want to make a change but only have the change affect a subset of the functions, the speedy solution is to reach for the trust control-c control-v solutions to all life&rsquo;s coding problems.</p>
<p>Having had this exact situation happen to me, hopefully the lessons I learnt may save you from the pain.</p>
<h2 id="consider-and-manage-your-layer-lifecycle">Consider And Manage Your Layer Lifecycle</h2>
<h4 id="action-separate-the-layer-into-its-own-cloudformation-stack">Action: Separate the layer into its own CloudFormation stack</h4>
<p>Give yourself the option of managing it independently.</p>
<p>Lambda layers introduce coupling between functions, in the example given above changes to the layer now have a large potential blast radius. If we need to make a breaking change to the layer, either we&rsquo;ve now got to perform code updates across a huge swathe of functions, or we have to maintain multiple parallel layer versions.</p>
<p>How onerous a task the function updates are depends in a large part on your automated testing suite. If you have a robust testing culture, it may well be possible to make all the requisite changes and have confidence no regressions have been introduced. Google&rsquo;s Beyoncé rule applies well here, “If you liked it, you should have put a CI test on it”</p>
<p>For managing multiple versions, by operating as an independent stack you can now export the layer reference with versioning, potentially <a href="https://semver.org/">semver</a>. Now stacks can !ImportValue the layer they&rsquo;re expecting and you can bring functions up to date independently of the layer update.</p>
<h2 id="dont-prematurely-optimise">Don&rsquo;t Prematurely Optimise</h2>
<p>One of the most oft quoted truisms in software development:</p>
<blockquote>
<p>We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.
<em><strong>Knuth and Hoare</strong></em></p>
</blockquote>
<p>You may be thinking that managing the lifecycle is a non-trivial amount of work, and you&rsquo;d be right. Managing shared code comes with overhead, that you&rsquo;re trading off against the effort of managing the duplication. Like all trade offs this should be conscious.</p>
<h4 id="action-regularly-review-the-code-in-the-layer-to-consciously-decide-what-is-worth-the-trade-off">Action: Regularly review the code in the layer to consciously decide what is worth the trade off</h4>
<h2 id="consider-other-options">Consider Other Options</h2>
<p>I&rsquo;m not trying to make out that layers are evil, far from it. They&rsquo;re a very useful tool to have. However, they are but one solution to code reuse in lambdas.</p>
<h3 id="1-packaging">1. Packaging</h3>
<p>Now CodeArtifact is finally released by AWS, packaging code has become a more realistic option. You still have to manage the lifecycle, but now the code has potentially wider reuse angles outside of lambda itself.</p>
<p>Packages are necessary in most non-trivial functions, potentially managing everything as packages is less cognitive load than a mixture of packages and layers.</p>
<h4 id="local-testing-side-note">Local Testing Side Note</h4>
<p>When integrating with language standard testing frameworks, layers can be hard or impossible to import as needed. Packages are much easier to handle in this regard.</p>
<h3 id="2-functional-decomposition">2. Functional Decomposition</h3>
<p>If you have common code functions, could they potentially be served as a lambda function in their own right? This kind of decomposition has interesting benefits from many angles, such as:</p>
<ul>
<li>Allows for design options to better leverage AWS technologies, e.g. push data to SQS so you can manage throughput to a Dynamo table</li>
<li>Finer grained IAM permissions, e.g. only give KMS key permissions to a much smaller subset of functions</li>
<li>Better user experience, e.g. respond back to the client once work has been asynchronously queued rather than wait for the entire process to finish</li>
</ul>
<p>See <a href="https://serverlesspatterns.io/">serverlesspatterns.io</a> for many more ways functional decomposition can improve your architectures</p>
<h4 id="action-reevaluate-whether-layers-are-the-right-choice-for-your-current-goals">Action: Reevaluate whether layers are the right choice for your current goals</h4>
<h2 id="conclusion">Conclusion</h2>
<p>Layers when used with due care and for the right reasons are an essential part of a serverless developers toolkit. Like every technology they suffer from the Dunning-Kruger effect, hopefully my battle scars will prove to be pedagogical and these lessons will help make you a happier developer.</p>
]]></content>
		</item>
		
		<item>
			<title>Conditional IAM Roles</title>
			<link>https://josharmi.github.io/posts/conditional-iam-roles/</link>
			<pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
			
			<guid>https://josharmi.github.io/posts/conditional-iam-roles/</guid>
			<description>Giving Consuming Teams A Choice Generally IAM roles are all-or-nothing deals, you either accept or reject the policies in their entirety. Here we look at leveraging CloudFormation conditions to build a configurable IAM role, that results in a more configurable and testable method for controlling role scope.
Where Might This Be Useful When controlling IAM roles within our sphere of control we follow the principle of least privilege, deploying exactly what is required to perform our tasks, which is relatively simple.</description>
			<content type="html"><![CDATA[<h2 id="giving-consuming-teams-a-choice">Giving Consuming Teams A Choice</h2>
<p>Generally IAM roles are all-or-nothing deals, you either accept or reject the policies in their entirety. Here we look at leveraging CloudFormation conditions to build a configurable IAM role, that results in a more configurable and testable method for controlling role scope.</p>
<h3 id="where-might-this-be-useful">Where Might This Be Useful</h3>
<p>When controlling IAM roles within our sphere of control we follow the principle of least privilege, deploying exactly what is required to perform our tasks, which is relatively simple. When we tread over into our sphere of influence it becomes far harder.</p>
<p>Take the example of wanting to enforce compliance standards across a large estate, as you build up trust with the team they may allow you to selectively enable automatic controls to remediate non-compliant resources. These can be things like automatically shutting down public S3 buckets, ensuring VPC flow logs are on, or deleting default VPCs. But as a delivery team with existing resources, I need to be able to slow bleed such actions into my environments, but how can I do that autonomously and with control?</p>
<p>Potentially the disparate permissions could be split into many roles deployed individually, but that starts to confer an ever increasing maintenance burden, and significantly complicates matters for the compliance team. From their perspective I want to deploy one standard resource into all environments, and let the delivery team autonomously decide what is enabled.</p>
<h3 id="onwards-to-a-solution">Onwards To A Solution</h3>
<h4 id="cloudformation-conditions">CloudFormation Conditions</h4>
<p>One of the lesser known CloudFormation options, Conditions allow us to selectively deploy resources. Let&rsquo;s look at a simple example:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">Parameters</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">MasterAccount</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>String<span class="w">
</span><span class="w">  </span><span class="k">BlockPublicRDP</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>String<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">Conditions</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">ShouldBlockPublicRDP</span><span class="p">:</span><span class="w"> </span>!Equals<span class="w"> </span><span class="p">[</span>!Ref<span class="w"> </span>BlockPublicRDP<span class="p">,</span><span class="w"> </span><span class="s2">&#34;Enabled&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">Resources</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">CrossAccountRole</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>AWS<span class="p">::</span>IAM<span class="p">::</span>Role<span class="w">
</span><span class="w">    </span><span class="k">Properties</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="k">RoleName</span><span class="p">:</span><span class="w"> </span>CrossAccountRole<span class="w">
</span><span class="w">      </span><span class="k">AssumeRolePolicyDocument</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="k">Version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2012-10-17&#34;</span><span class="w">
</span><span class="w">        </span><span class="k">Statement</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="k">Effect</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Allow&#34;</span><span class="w">
</span><span class="w">            </span><span class="k">Principal</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="k">AWS</span><span class="p">:</span><span class="w">
</span><span class="w">                </span>- !Sub<span class="w"> </span><span class="s2">&#34;arn:aws:iam::${MasterAccount}:root&#34;</span><span class="w">
</span><span class="w">            </span><span class="k">Action</span><span class="p">:</span><span class="w">
</span><span class="w">              </span>- <span class="s2">&#34;sts:AssumeRole&#34;</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="k">BlockPublicRDPPolicy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">Condition</span><span class="p">:</span><span class="w"> </span>ShouldBlockPublicRDP<span class="w">
</span><span class="w">    </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>AWS<span class="p">::</span>IAM<span class="p">::</span>ManagedPolicy<span class="w">
</span><span class="w">    </span><span class="k">Properties</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="k">ManagedPolicyName</span><span class="p">:</span><span class="w"> </span>BlockPublicRDP<span class="w">
</span><span class="w">      </span><span class="k">Roles</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- !Ref<span class="w"> </span>CrossAccountRole<span class="w">
</span><span class="w">      </span><span class="k">PolicyDocument</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="k">Version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2012-10-17&#34;</span><span class="w">
</span><span class="w">        </span><span class="k">Statement</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="k">Effect</span><span class="p">:</span><span class="w"> </span>Allow<span class="w">
</span><span class="w">            </span><span class="k">Action</span><span class="p">:</span><span class="w">
</span><span class="w">              </span>- <span class="s2">&#34;ec2:RevokeSecurityGroupEgress&#34;</span><span class="w">
</span><span class="w">              </span>- <span class="s2">&#34;ec2:RevokeSecurityGroupIngress&#34;</span><span class="w">
</span><span class="w">            </span><span class="k">Resource</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;*&#34;</span><span class="w">
</span></code></pre></div><ul>
<li>We have a parameter <code>BlockPublicRDP</code> which gets compared against &ldquo;Enabled&rdquo;</li>
<li>If true, we deploy the <code>BlockPublicRDPPolicy</code> resource</li>
</ul>
<h4 id="tuning-up-the-parameters">Tuning Up The Parameters</h4>
<p>The above code although simple, is somewhat naive. We can improve it already by applying some constraints to the parameters.</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">Parameters</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">MasterAccount</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">AllowedPattern</span><span class="p">:</span><span class="w"> </span>^\d{<span class="m">12</span>}$<span class="w">
</span><span class="w">    </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>String<span class="w">
</span><span class="w">  </span><span class="k">BlockPublicRDP</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">AllowedValues</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;Enabled&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;Disabled&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">    </span><span class="k">ConstraintDescription</span><span class="p">:</span><span class="w"> </span>Must<span class="w"> </span>be<span class="w"> </span>Enabled<span class="w"> </span>or<span class="w"> </span>Disabled<span class="w">
</span><span class="w">    </span><span class="k">Default</span><span class="p">:</span><span class="w"> </span>Disabled<span class="w">
</span><span class="w">    </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>String<span class="w">
</span></code></pre></div><ul>
<li>The regex on master account locks it down to valid AWS account Ids</li>
<li>By adding a Disabled default we make our policies opt-in for safety</li>
<li>By setting allowed values we will explicitly only handle Enabled or Disabled</li>
</ul>
<h4 id="scalably-passing-parameters">Scalably Passing Parameters</h4>
<p>Anyone that&rsquo;s passed parameters over the CLI will understand how unwieldly it becomes. The scalable way to pass parameters is with a <code>json</code> file committed into source control. To that end let&rsquo;s look at the files are formatted:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">[</span>
    <span class="p">{</span>
        <span class="nt">&#34;ParameterKey&#34;</span><span class="p">:</span> <span class="s2">&#34;MasterAccount&#34;</span><span class="p">,</span>
        <span class="nt">&#34;ParameterValue&#34;</span><span class="p">:</span> <span class="s2">&#34;111122223333&#34;</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="nt">&#34;ParameterKey&#34;</span><span class="p">:</span> <span class="s2">&#34;BlockPublicRDP&#34;</span><span class="p">,</span>
        <span class="nt">&#34;ParameterValue&#34;</span><span class="p">:</span> <span class="s2">&#34;Enabled&#34;</span>
    <span class="p">}</span>
<span class="p">]</span>
</code></pre></div><p>Now we can deploy the template with commands of the form:</p>
<p><code>aws cloudformation create/update-stack --stack-name ConditionalRole --template-body file://role.yaml --parameters file://parameters.json --capabilities CAPABILITY_NAMED_IAM</code></p>
<h4 id="cloudformation-conditions-for-iam-conditions">CloudFormation Conditions for IAM Conditions</h4>
<p>One of the lesser used be more interesting parts of IAM policies are the condition statements that can be applied. Taking our above example a step further, what if we wanted to lock down what security groups we could edit by tag. In the policy we need to extend the statement to include a condition stanza so it looks like:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">BlockPublicRDPPolicy</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">Condition</span><span class="p">:</span><span class="w"> </span>ShouldBlockPublicRDP<span class="w">
</span><span class="w">  </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>AWS<span class="p">::</span>IAM<span class="p">::</span>ManagedPolicy<span class="w">
</span><span class="w">  </span><span class="k">Properties</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">ManagedPolicyName</span><span class="p">:</span><span class="w"> </span>BlockPublicRDP<span class="w">
</span><span class="w">    </span><span class="k">Roles</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- !Ref<span class="w"> </span>CrossAccountRole<span class="w">
</span><span class="w">    </span><span class="k">PolicyDocument</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="k">Version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2012-10-17&#34;</span><span class="w">
</span><span class="w">      </span><span class="k">Statement</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="k">Effect</span><span class="p">:</span><span class="w"> </span>Allow<span class="w">
</span><span class="w">          </span><span class="k">Action</span><span class="p">:</span><span class="w">
</span><span class="w">            </span>- <span class="s2">&#34;ec2:RevokeSecurityGroupEgress&#34;</span><span class="w">
</span><span class="w">            </span>- <span class="s2">&#34;ec2:RevokeSecurityGroupIngress&#34;</span><span class="w">
</span><span class="w">          </span><span class="k">Resource</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;*&#34;</span><span class="w">
</span><span class="w">          </span><span class="k">Condition</span><span class="p">:</span><span class="w">
</span><span class="w">            </span><span class="k">StringEquals</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="k">&#34;ec2:ResourceTag/Owner&#34;: </span>!Ref<span class="w"> </span>SecurityGroupTagValue<span class="w">
</span></code></pre></div><p>Now we can pass in an extra parameter to lock down the policy, but we need to maintain the ability to open it up to acting on all security groups. So let&rsquo;s add another condition to control out condition&hellip;</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">[</span>
    <span class="p">{</span>
        <span class="nt">&#34;ParameterKey&#34;</span><span class="p">:</span> <span class="s2">&#34;MasterAccount&#34;</span><span class="p">,</span>
        <span class="nt">&#34;ParameterValue&#34;</span><span class="p">:</span> <span class="s2">&#34;111122223333&#34;</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="nt">&#34;ParameterKey&#34;</span><span class="p">:</span> <span class="s2">&#34;BlockPublicRDP&#34;</span><span class="p">,</span>
        <span class="nt">&#34;ParameterValue&#34;</span><span class="p">:</span> <span class="s2">&#34;Enabled&#34;</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="nt">&#34;ParameterKey&#34;</span><span class="p">:</span> <span class="s2">&#34;SecurityTagRestriction&#34;</span><span class="p">,</span>
        <span class="nt">&#34;ParameterValue&#34;</span><span class="p">:</span> <span class="s2">&#34;Enabled&#34;</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="nt">&#34;ParameterKey&#34;</span><span class="p">:</span> <span class="s2">&#34;SecurityGroupTagValue&#34;</span><span class="p">,</span>
        <span class="nt">&#34;ParameterValue&#34;</span><span class="p">:</span> <span class="s2">&#34;JoshArmi&#34;</span>
    <span class="p">}</span>
<span class="p">]</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">Parameters</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">MasterAccount</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">AllowedPattern</span><span class="p">:</span><span class="w"> </span>^\d{<span class="m">12</span>}$<span class="w">
</span><span class="w">    </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>String<span class="w">
</span><span class="w">  </span><span class="k">BlockPublicRDP</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">AllowedValues</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;Enabled&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;Disabled&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">    </span><span class="k">ConstraintDescription</span><span class="p">:</span><span class="w"> </span>Must<span class="w"> </span>be<span class="w"> </span>Enabled<span class="w"> </span>or<span class="w"> </span>Disabled<span class="w">
</span><span class="w">    </span><span class="k">Default</span><span class="p">:</span><span class="w"> </span>Disabled<span class="w">
</span><span class="w">    </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>String<span class="w">
</span><span class="w">  </span><span class="k">SecurityTagRestriction</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">AllowedValues</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;Enabled&#34;</span><span class="p">,</span><span class="w"> </span><span class="s2">&#34;Disabled&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">    </span><span class="k">ConstraintDescription</span><span class="p">:</span><span class="w"> </span>Must<span class="w"> </span>be<span class="w"> </span>Enabled<span class="w"> </span>or<span class="w"> </span>Disabled<span class="w">
</span><span class="w">    </span><span class="k">Default</span><span class="p">:</span><span class="w"> </span>Disabled<span class="w">
</span><span class="w">    </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>String<span class="w">
</span><span class="w">  </span><span class="k">SecurityGroupTagValue</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>String<span class="w">
</span><span class="w">    </span><span class="k">Default</span><span class="p">:</span><span class="w"> </span>Disabled<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">Conditions</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">ShouldBlockPublicRDP</span><span class="p">:</span><span class="w"> </span>!Equals<span class="w"> </span><span class="p">[</span>!Ref<span class="w"> </span>BlockPublicRDP<span class="p">,</span><span class="w"> </span><span class="s2">&#34;Enabled&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">  </span><span class="k">RestrictedByTags</span><span class="p">:</span><span class="w"> </span>!Equals<span class="w"> </span><span class="p">[</span>!Ref<span class="w"> </span>SecurityTagRestriction<span class="p">,</span><span class="w"> </span><span class="s2">&#34;Enabled&#34;</span><span class="p">]</span><span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">Resources</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">CrossAccountRole</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>AWS<span class="p">::</span>IAM<span class="p">::</span>Role<span class="w">
</span><span class="w">    </span><span class="k">Properties</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="k">RoleName</span><span class="p">:</span><span class="w"> </span>CrossAccountRole<span class="w">
</span><span class="w">      </span><span class="k">AssumeRolePolicyDocument</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="k">Version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2012-10-17&#34;</span><span class="w">
</span><span class="w">        </span><span class="k">Statement</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="k">Effect</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;Allow&#34;</span><span class="w">
</span><span class="w">            </span><span class="k">Principal</span><span class="p">:</span><span class="w">
</span><span class="w">              </span><span class="k">AWS</span><span class="p">:</span><span class="w">
</span><span class="w">                </span>- !Sub<span class="w"> </span><span class="s2">&#34;arn:aws:iam::${MasterAccount}:root&#34;</span><span class="w">
</span><span class="w">            </span><span class="k">Action</span><span class="p">:</span><span class="w">
</span><span class="w">              </span>- <span class="s2">&#34;sts:AssumeRole&#34;</span><span class="w">
</span><span class="w">
</span><span class="w">  </span><span class="k">BlockPublicRDPPolicy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">Condition</span><span class="p">:</span><span class="w"> </span>ShouldBlockPublicRDP<span class="w">
</span><span class="w">    </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>AWS<span class="p">::</span>IAM<span class="p">::</span>ManagedPolicy<span class="w">
</span><span class="w">    </span><span class="k">Properties</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="k">ManagedPolicyName</span><span class="p">:</span><span class="w"> </span>BlockPublicRDP<span class="w">
</span><span class="w">      </span><span class="k">Roles</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- !Ref<span class="w"> </span>CrossAccountRole<span class="w">
</span><span class="w">      </span><span class="k">PolicyDocument</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="k">Version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2012-10-17&#34;</span><span class="w">
</span><span class="w">        </span><span class="k">Statement</span><span class="p">:</span><span class="w">
</span><span class="w">          </span>- <span class="k">Effect</span><span class="p">:</span><span class="w"> </span>Allow<span class="w">
</span><span class="w">            </span><span class="k">Action</span><span class="p">:</span><span class="w">
</span><span class="w">              </span>- <span class="s2">&#34;ec2:RevokeSecurityGroupEgress&#34;</span><span class="w">
</span><span class="w">              </span>- <span class="s2">&#34;ec2:RevokeSecurityGroupIngress&#34;</span><span class="w">
</span><span class="w">            </span><span class="k">Resource</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;*&#34;</span><span class="w">
</span><span class="w">            </span><span class="k">Condition</span><span class="p">:</span><span class="w"> </span>!If<span class="w">
</span><span class="w">              </span>- RestrictedByTags<span class="w">
</span><span class="w">              </span>- <span class="k">StringEquals</span><span class="p">:</span><span class="w">
</span><span class="w">                  </span><span class="k">ec2:ResourceTag/Owner</span><span class="p">:</span><span class="w"> </span>!Ref<span class="w"> </span>SecurityGroupTagValue<span class="w">
</span><span class="w">              </span>- !Ref<span class="w"> </span>AWS<span class="p">::</span>NoValue<span class="w">
</span></code></pre></div><p>Now if we set <code>SecurityTagRestriction</code> to <code>Enabled</code> then the condition is applied. If it is set to <code>Disabled</code> then by the magic of <code>AWS::NoValue</code> the Condition property disappears and it&rsquo;s like it never existed at all.</p>
<h4 id="making-the-configuration-consumable">Making The Configuration Consumable</h4>
<p>So we&rsquo;ve given the delivery teams a capbility to select known IAM configurations by only touching the parameter json file, which is a significant win, rather than hand editing the yaml with potentially disastrous and unforseen consequences, we&rsquo;ve locked down the possible number of states of the role and given something which is inherently more testable.</p>
<p>But once again donning the hat of the compliance team how do we determine what configuration is in flight in a given account, there is one missing permission from the role which enables us to understand the configuration:</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">ListPolicies</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">Type</span><span class="p">:</span><span class="w"> </span>AWS<span class="p">::</span>IAM<span class="p">::</span>ManagedPolicy<span class="w">
</span><span class="w">  </span><span class="k">Properties</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">ManagedPolicyName</span><span class="p">:</span><span class="w"> </span>ListRolePolicies<span class="w">
</span><span class="w">    </span><span class="k">Roles</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- !Ref<span class="w"> </span>CrossAccountRole<span class="w">
</span><span class="w">    </span><span class="k">PolicyDocument</span><span class="p">:</span><span class="w">
</span><span class="w">      </span><span class="k">Version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2012-10-17&#34;</span><span class="w">
</span><span class="w">      </span><span class="k">Statement</span><span class="p">:</span><span class="w">
</span><span class="w">        </span>- <span class="k">Effect</span><span class="p">:</span><span class="w"> </span>Allow<span class="w">
</span><span class="w">          </span><span class="k">Action</span><span class="p">:</span><span class="w">
</span><span class="w">            </span>- <span class="s2">&#34;iam:ListAttachedRolePolicies&#34;</span><span class="w">
</span><span class="w">          </span><span class="k">Resource</span><span class="p">:</span><span class="w"> </span>!GetAtt<span class="w"> </span>CrossAccountRole.Arn<span class="w">
</span></code></pre></div><p>With that permission in place we can list the policies attached to the role, allowing us to determine the state of play in any given account.</p>
<p>Assuming the role and running <code>aws iam list-attached-role-policies --role-name CrossAccountRole</code> returns:</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;AttachedPolicies&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nt">&#34;PolicyName&#34;</span><span class="p">:</span> <span class="s2">&#34;BlockPublicRDP&#34;</span><span class="p">,</span>
            <span class="nt">&#34;PolicyArn&#34;</span><span class="p">:</span> <span class="s2">&#34;arn:aws:iam::285525127666:policy/BlockPublicRDP&#34;</span>
        <span class="p">},</span>
        <span class="p">{</span>
            <span class="nt">&#34;PolicyName&#34;</span><span class="p">:</span> <span class="s2">&#34;ListRolePolicies&#34;</span><span class="p">,</span>
            <span class="nt">&#34;PolicyArn&#34;</span><span class="p">:</span> <span class="s2">&#34;arn:aws:iam::285525127666:policy/ListRolePolicies&#34;</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span>
</code></pre></div><h4 id="click-here-for-full-sourcehttpsgithubcomjosharmiconditional-iam-roles"><a href="https://github.com/JoshArmi/conditional-iam-roles">Click Here For Full Source</a></h4>
<h3 id="conclusion">Conclusion</h3>
<p>This feels like a good, low investment solution for managing IAM at scale that is consumed by other delivery teams, they can opt-in to IAM on their terms, which also gives them the option of opt-out in the case of an issue.</p>
<p>By making the configuration done via parameters in the json file, we can provide an interface that reduces the burden on the consuming teams whilst also giving the compliance team a more manageable surface to test compared to hand-editing templates.</p>
<p>Although CloudFormation being CloudFormation, I did revisit and old bug-bear which still seems to be an issue as explained below:</p>
<h4 id="configuring-the-tag-key">Configuring The Tag Key</h4>
<p>The eagle eyed amongst you will see that potentially you might want to configure the key of the tag as well as the value, unfortunately it does not appear that computed keys are allowed in CloudFormation. So consider this another addition to my #awswishlist</p>
]]></content>
		</item>
		
		<item>
			<title>DIY StackSets with Step Functions</title>
			<link>https://josharmi.github.io/posts/diy-stacksets/</link>
			<pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
			
			<guid>https://josharmi.github.io/posts/diy-stacksets/</guid>
			<description>Why Recreate StackSets Currently in order to leverage StackSets in any way you need fairly substantial permissions in the target account, as per the documentation, the minimum permissions to operate StackSets are:
{ &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, &amp;quot;Statement&amp;quot;: [ { &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Action&amp;quot;: [ &amp;quot;cloudformation:*&amp;quot;, &amp;quot;s3:*&amp;quot;, &amp;quot;sns:*&amp;quot; ], &amp;quot;Resource&amp;quot;: &amp;quot;*&amp;quot; } ] } Having full S3, CloudFormation and SNS access cross account into production does feel like something we want to avoid. But StackSets give us a highly efficient and useful way to deploy stacks across large swathes of the estate, how much effort is it to build something that gives us some of the same functionality with much more restricted permissions.</description>
			<content type="html"><![CDATA[<h2 id="why-recreate-stacksets">Why Recreate StackSets</h2>
<p>Currently in order to leverage StackSets in any way you need fairly substantial permissions in the target account, as per the <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-prereqs-self-managed.html#stacksets-prereqs-accountsetup">documentation</a>, the minimum permissions to operate StackSets are:</p>
<pre><code>{
    &quot;Version&quot;: &quot;2012-10-17&quot;,
    &quot;Statement&quot;: [
        {
            &quot;Effect&quot;: &quot;Allow&quot;,
            &quot;Action&quot;: 
               [
                 &quot;cloudformation:*&quot;,
                 &quot;s3:*&quot;,
                 &quot;sns:*&quot;
               ],
            &quot;Resource&quot;: &quot;*&quot;
        }
      ]
}
</code></pre><p>Having <em>full</em> <strong>S3</strong>, <strong>CloudFormation</strong> and <strong>SNS</strong> access cross account into production does feel like something we want to avoid.
But StackSets give us a highly efficient and useful way to deploy stacks across large swathes of the estate, how much effort is it to build something that gives us some of the same functionality with much more restricted permissions.</p>
<h2 id="step-functions-to-the-rescue">Step Functions to the Rescue?</h2>
<p>With the new Step Functions releases:</p>
<ol>
<li>Step Functions can now be invoked diretly from CodePipeline</li>
<li>Step Functions have been added to AWS SAM</li>
</ol>
<p>They seems like a good reason to use step functions to build StackSets-lite, so here we go&hellip;</p>
<h2 id="the-end-goal">The End Goal</h2>
<p>By the end of the post we should have:</p>
<ul>
<li>A DIY StackSet Proof of Concept consisting of:
<ol>
<li>A pipeline that deploys and executes a step function</li>
<li>A step function that deploys a template out to all accounts in an organization</li>
<li>Cross accounts roles that stay true to the principle of least privilege</li>
</ol>
</li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<ol>
<li>An AWS organization set up</li>
<li>The AWS CLI installed</li>
<li>Git installed</li>
<li>A GitHub account</li>
</ol>
<h2 id="pipeline-set-up">Pipeline Set Up</h2>
<p>The pipeline we have here is currently predicated on the source code being in GitHub, so let&rsquo;s set that up:</p>
<ol>
<li>Import the example repo in GitHub
<ol>
<li>Go to <a href="https://github.com/new/import">https://github.com/new/import</a></li>
<li>Enter the url <code>https://github.com/JoshArmi/sam-pipeline</code></li>
<li>Name the repository</li>
<li>Begin the import</li>
</ol>
</li>
<li>Create an OAuth token for the pipeline
<ol>
<li>Go to <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></li>
<li>Click <code>Personal access tokens</code></li>
<li>Click <code>Generate new token</code></li>
<li>Give it full <code>repo</code> and full <code>admin:repo_hook</code> permissions</li>
<li>Generate the token</li>
<li>Note the token somewhere</li>
</ol>
</li>
<li>Once the repo successfully imports, make sure there are 7 remote branches</li>
<li>Clone the imported repository locally and checkout branch <code>main</code></li>
<li>Run <code>git merge origin/part1</code></li>
<li>Update the values in <code>pipeline-parameters.json</code></li>
<li>Update the values in <code>seed-parameters.json</code></li>
<li>Add, Commit and Push the changes in <code>pipeline-parameters.json</code> and <code>seed-parameters.json</code></li>
<li>Assume a role in the <strong>pipeline account</strong></li>
<li>Push your GitHub token into the AWS account
<ol>
<li>Run <code>aws cloudformation create-stack --stack-name GitHubOAuthSecret --template-body file://secret.yaml</code></li>
<li>Run <code>aws secretsmanager put-secret-value --secret-id GitHubOAuthToken --secret-string &quot;{\&quot;token\&quot;:\&quot;YOUR_GITHUB_TOKEN\&quot;}&quot;</code></li>
</ol>
</li>
<li>Run <code>aws cloudformation create-stack --stack-name Pipeline --template-body file://pipeline.yaml --parameters file://seed-parameters.json --capabilities CAPABILITY_NAMED_IAM</code></li>
</ol>
<h3 id="pit-stop">Pit Stop</h3>
<p>OK let&rsquo;s review where we&rsquo;re at currently:</p>
<ul>
<li>If you look in the console we should have a pipeline that looks like this:</li>
</ul>
<p><img src="/static/images/pipeline-1.png" alt="Stage 1 Pipeline" title="Stage 1 Pipeline"></p>
<p>Now as this pipeline redeploys itself, we can work through the rest of the post by constantly pushing to our repository.</p>
<h2 id="adding-the-step-function">Adding The Step Function</h2>
<p>First up we&rsquo;re going to deploy the world&rsquo;s simplest step function, then we&rsquo;ll look at how to automatically execute the step function after deploying it.</p>
<ol>
<li>Run <code>git merge origin/part2</code></li>
<li>Run <code>git push</code></li>
</ol>
<p>Let&rsquo;s look at what changes we&rsquo;ve made:</p>
<ul>
<li>The pipeline now has a deployment stage executing the <code>buildspec.yaml</code> file</li>
<li>The buildspec deploys the SAM app contained in <code>template.yaml</code></li>
<li>The SAM app creates a step function per the ASL file with a single task</li>
<li>The single task is a new Lambda function which just exits</li>
</ul>
<p>Once the pipeline finishes executing it should look something like:</p>
<p><img src="/static/images/pipeline-2.png" alt="Stage 2 Pipeline" title="Stage 2 Pipeline"></p>
<p>Now the pipeline should successfully deploy the step function and now we can add an execution stage by:</p>
<ol>
<li>Run <code>git merge origin/part3</code></li>
<li>Run <code>git push</code></li>
</ol>
<p>Now when we look at the pipeline we should see four stages, with the last being a successful execution of the step function.</p>
<h3 id="recap-of-where-we-are">Recap of where we are</h3>
<p>So we have a pipeline that deploys and executes a step function, which is a placeholder. Which looks something like:</p>
<p><img src="/static/images/pipeline-3.png" alt="Stage 3 Pipeline" title="Stage 3 Pipeline"></p>
<p>We need to make the step function do something useful.</p>
<h2 id="stepping-into-something-useful">Stepping Into Something Useful</h2>
<p>Now we&rsquo;ll bring in a step function that actually purports to do something, so:</p>
<ol>
<li>Run <code>git merge origin/part4</code></li>
<li>Update the parameter defaults of <code>template.yaml</code></li>
<li>Add, Commit and Push the changes</li>
<li>Accept the email confirming the SNS subscription</li>
</ol>
<p>Looking at the Lambda function code, we can see that currently the functions do not have sufficient permissions to undertake their tasks.</p>
<p>So let&rsquo;s look at fixing that:</p>
<ol>
<li>Run <code>git merge origin/part5</code></li>
<li>Assume a role in your billing account
<ol>
<li>Run <code>aws cloudformation deploy --stack-name AccountLister --template-file master-role.yaml --capabilities CAPABILITY_NAMED_IAM</code></li>
<li>Run <code>aws cloudformation deploy --stack-name CrossAccountDeploy --template-file client-role.yaml --capabilities CAPABILITY_NAMED_IAM</code></li>
</ol>
</li>
<li>For each other account in your organisation, including the pipeline account:
<ol>
<li>Run <code>aws cloudformation deploy --stack-name CrossAccountDeploy --template-file client-role.yaml --capabilities CAPABILITY_NAMED_IAM</code></li>
</ol>
</li>
<li>Run <code>git push</code></li>
</ol>
<p>We&rsquo;ve now deployed with the last push:</p>
<ul>
<li>A role in the billing account allowing us to look up all accounts under the organisation</li>
<li>A role in every account that allows us to deploy tagged CloudFormation stacks and S3 buckets</li>
<li>Another pipeline extension that pushes <code>templates/template.yaml</code> into an S3 bucket to deploy into the accounts</li>
<li>We have deployed a bucket into every account in the organization as per <code>./templates/template.yaml</code></li>
<li>Failed deployments trigger an email being sent to a preset email address</li>
</ul>
<h2 id="success">Success?</h2>
<p>If you go and look in all accounts where you deployed the <em><strong>CrossDeployRole</strong></em>, you should now have a CloudFormation stack called <strong>Bucket</strong>.</p>
<p>With the goal being to replace StackSets at this point we have a <em><strong>Proof of Concept</strong></em> that shows that we can build a system for pushing CloudFormation out without needing the same level of permissions as StackSets.</p>
<p>However the code as it stands only covers the <em><strong>happy path</strong></em> when it comes to handling CloudFormation stacks, we can extend the code but the amount of complexity we have to handle starts to increase. Currently we&rsquo;re only accounting for the 3 most common out of about 25 possible CloudFormation states.</p>
<p>Step functions do provide a visual way to understand the complexity, and it does seem achievable to build a deployment mechanism that is both robust and maintainable.</p>
<h2 id="cleanup">Cleanup</h2>
<p>To destroy all resources created:</p>
<ol>
<li>In the pipeline account
<ol>
<li>Delete the Pipeline stack</li>
<li>Delete the sam-app stack</li>
<li>Delete the CrossAccountDeploy stack</li>
<li>Delete the bucket created by the Bucket stack</li>
<li>Delete the Bucket stack</li>
</ol>
</li>
<li>In the billing account
<ol>
<li>Delete the AccountLister stack</li>
<li>Delete the CrossAccountDeploy stack</li>
<li>Delete the bucket created by the Bucket stack</li>
<li>Delete the Bucket stack</li>
</ol>
</li>
<li>In all other accounts
<ol>
<li>Delete the CrossAccountDeploy stack</li>
<li>Delete the bucket created by the Bucket stack</li>
<li>Delete the Bucket stack</li>
</ol>
</li>
</ol>
<h2 id="next-steps">Next Steps</h2>
<p>There are a variety of options for the next system extension, including:</p>
<ul>
<li>Allowing for deploying to stages of accounts to minimise blast radius</li>
<li>Handling more CloudFormation stack states</li>
<li>Collapsing errors down to one summary email</li>
<li>Emailing a summary of all successful deployments</li>
</ul>
<h2 id="thoughts">Thoughts?</h2>
<p>Reach out to me on Twitter or LinkedIn, I&rsquo;d love to hear what people&rsquo;s opinions of StackSets are, and whether they&rsquo;ve journeyed down a similar path.</p>
]]></content>
		</item>
		
		<item>
			<title>Scalable DNS with EventBridge</title>
			<link>https://josharmi.github.io/posts/scalable-dns-with-eventbridge/</link>
			<pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
			
			<guid>https://josharmi.github.io/posts/scalable-dns-with-eventbridge/</guid>
			<description>The Problem DNS, the source of all network problems, can be frustrating to implement at scale. Helpfully, AWS have released this guide on doing multi-account DNS. As with most things multi-account, automating the process is more involved than we would like, nevertheless we persevere and in this case show how AWS EventBridge can be the glue by which we stick together infrastructure at scale.
The Outcome By the end of this you should have:</description>
			<content type="html"><![CDATA[<h2 id="the-problem">The Problem</h2>
<p>DNS, the source of all network problems, can be frustrating to implement at scale.
Helpfully, AWS have released <a href="https://aws.amazon.com/blogs/security/simplify-dns-management-in-a-multiaccount-environment-with-route-53-resolver/">this guide</a> on doing multi-account DNS. As with most things multi-account, automating the process is more involved than we would like, nevertheless we persevere and in this case show how <a href="https://aws.amazon.com/eventbridge/">AWS EventBridge</a> can be the glue by which we stick together infrastructure at scale.</p>
<h2 id="the-outcome">The Outcome</h2>
<p>By the end of this you should have:</p>
<ul>
<li>One central DNS VPC account</li>
<li>Two child accounts that can resolve each others Private Hosted Zone</li>
<li>A CloudFormation template and pattern to enroll new accounts into the DNS web</li>
</ul>
<h2 id="prerequisites">Prerequisites</h2>
<ul>
<li>Three AWS accounts under an organisation</li>
<li>Have the ARN of your organization handy</li>
<li>The GitHub repository <a href="https://www.github.com/josharmi/Private-Hosted-Zone">https://www.github.com/josharmi/Private-Hosted-Zone</a> cloned locally</li>
</ul>
<h2 id="the-core-dns-account">The Core DNS Account</h2>
<h3 id="setting-up-the-dns-vpc">Setting up the DNS VPC</h3>
<p>As you can see in the high level architecture diagram in the AWS documentation:</p>
<p><img src="/static/images/high-level-arch.jpg" alt="High Level Architecture" title="High Level Architecture"></p>
<p>We need a centralised VPC to act as our DNS hub. To set that up:</p>
<ol>
<li>Assume a role in your designated central DNS account</li>
<li>Update the <code>dns-parameters.json</code> file with your Organization ARN.</li>
<li>Run: <code>aws cloudformation create-stack --stack-name DNSVPC --template-file dns-vpc.yaml --parameters file://dns-parameters.json</code></li>
</ol>
<p>Now let&rsquo;s quickly look at what we deployed:</p>
<ol>
<li>We have the world&rsquo;s simplest VPC, nothing interesting there</li>
<li>We have an outbound endpoint, which we need for the resolver rule</li>
<li>We have an inbound endpoint, which we manually set the IP addresses for as CloudFormation doesn&rsquo;t return them as attributes</li>
<li>We have the parent private hosted zone that we&rsquo;re going to subdomain off for the child accounts</li>
<li>We have a resolver rule that is the magic sauce, that directs all traffic for our hosted zone to this VPC via the outbound endpoint</li>
<li>We have a share via AWS RAM that shares said resolver rule with your organization</li>
</ol>
<h3 id="adding-eventbridge">Adding EventBridge</h3>
<p>The next step is configuring EventBridge on the DNS account so we can accept events from the child accounts:</p>
<ol>
<li>Update the <code>master-parameters.json</code> file with your Organization Id
1 Run <code>aws cloudformation create-stack --stack-name EventBus --template-body file://event-bus-master.yaml --parameters file://master-parameters.json --capabilities CAPABILITY_IAM</code></li>
</ol>
<p>Let&rsquo;s quickly look at what we have deployed now:</p>
<ol>
<li>We have an EventBridge policy that allows all accounts in our Organization to push events into the account</li>
<li>We have a lambda function to associate new Private Hosted Zones with the DNS VPC</li>
<li>We have a rule that based on an event source triggers the lambda function</li>
</ol>
<h2 id="the-first-child-account">The First Child Account</h2>
<p>Before we start provisioning resources in the child accounts we need to get a few details from the master account.</p>
<ol>
<li>Run <code>aws cloudformation describe-stacks --stack-name DNSVPC</code></li>
<li>Grab the outputs for the ResolverRuleId and DNSVPCId and copy them into <code>client-parameters-1.json</code> and <code>client-parameters-2.json</code></li>
</ol>
<p>Now we&rsquo;re ready to deploy into the child accounts</p>
<ol>
<li>Assume a role in the child account</li>
<li>Run <code>aws cloudformation create-stack --stack-name EventBus --template-body file://event-bus-client.yaml --parameters file://client-parameters-1.json --capabilities CAPABILITY_IAM</code></li>
</ol>
<p>And we have deployed:</p>
<ol>
<li>Another simple VPC with just enough configuration</li>
<li>A private hosted zone subdomain</li>
<li>A custom resource to associate the private hosted zone with the DNS VPC</li>
<li>A custom resource to fire a custom event to the account default event bus</li>
<li>An EventBridge rule to fire said event over to the DNS master account</li>
<li>A record set for testing the inter-account DNS</li>
</ol>
<h2 id="the-second-child-account">The Second Child Account</h2>
<p>Now we can set up the other child:</p>
<ol>
<li>Assume a role in the child account</li>
<li>Run <code>aws cloudformation create-stack --stack-name EventBus --template-body file://event-bus-client.yaml --parameters file://client-parameters-2.json --capabilities CAPABILITY_IAM</code></li>
</ol>
<p>And we have deployed the same resources as in the first child, but under a different subdomain and CIDR.</p>
<h2 id="testing-what-weve-built">Testing What We&rsquo;ve Built</h2>
<p>The simplest test is to create an EC2 machine in either of the child accounts.</p>
<h3 id="in-the-second-account">In the second account</h3>
<ol>
<li>
<p>Set up an EC2 machine with a public IP and a known key pair.</p>
</li>
<li>
<p>SSH onto the machine</p>
</li>
<li>
<p>Run <code>nslookup test.beta.cloud.private</code></p>
<p>You should see:</p>
<pre><code>[ec2-user@ip-10-0-2-124 ~]$ nslookup test.beta.cloud.private
Server:		10.0.2.2
Address:	10.0.2.2#53

Non-authoritative answer:
Name:	test.beta.cloud.private
Address: 10.0.1.10
</code></pre></li>
</ol>
<h3 id="success"><strong>!!SUCCESS!!</strong></h3>
<h2 id="reviewing-what-we-did">Reviewing What We Did</h2>
<ol>
<li>We deployed a central DNS VPC</li>
<li>We deployed Route 53 infrastructure to share across the organization</li>
<li>We set up EventBridge to automatically enroll new Private Hosted Zones</li>
<li>We configured private hosted zones in two child accounts</li>
<li>We tested that we now could resolve hostnames between accounts</li>
</ol>
<h2 id="next-steps">Next Steps</h2>
<p>Now we are in a position where we can continue to enroll more accounts, VPCs and private hosted zones. However, the templates are already feeling somewhat unwieldly.</p>
<h3 id="refactoring">Refactoring</h3>
<ul>
<li>Making a private resource to act as an EventBridge event emitter</li>
<li>Breaking the Custom Resource Definitions out into a separate, potentially nested, templates</li>
<li>Extracting out the EventBridge policy in the DNS account into a separate template</li>
<li>Potentially Serverless Framework could reduce the amount of code to maintain</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>Scaling Security</title>
			<link>https://josharmi.github.io/posts/scaling-security/</link>
			<pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
			
			<guid>https://josharmi.github.io/posts/scaling-security/</guid>
			<description>The Scene You&amp;rsquo;re a new CISO at a rapidly scaling technology company with 50 engineers, looking to double engineering within 12 months. The company is trying to maintain its agility and rapid delivery, but you&amp;rsquo;re hitting a point where the security cowboy nature has presented too great a risk to be ignored any longer.
Tasked with imporving the security posture across the board, you&amp;rsquo;re worried that the developers and product owners don&amp;rsquo;t care about security.</description>
			<content type="html"><![CDATA[<h2 id="the-scene">The Scene</h2>
<p>You&rsquo;re a new CISO at a rapidly scaling technology company with 50 engineers, looking to double engineering within 12 months. The company is trying to maintain its agility and rapid delivery, but you&rsquo;re hitting a point where the security cowboy nature has presented too great a risk to be ignored any longer.</p>
<p>Tasked with imporving the security posture across the board, you&rsquo;re worried that the developers and product owners don&rsquo;t care about security. You haven&rsquo;t quite won an <a href="https://duckduckgo.com/?q=s3+bucket+negligence+award&amp;t=ffab&amp;atb=v1-1&amp;ia=web">S3 bucket negligence award</a> but after reviewing the AWS setup, you&rsquo;re worried that it&rsquo;s a matter of when not if.</p>
<p>What options do you have to instill good practice throughout the company in a way that is both effective and cost efficient? How can you shift security left and deliver secure software without compromising velocity?</p>
<h2 id="option-1---grow-the-security-team">Option 1 - Grow the Security Team</h2>
<p>The development teams are using scrum, they have the ceremonies you would expect, e.g. daily standups, fortnightly showcases and retrospectives. If you grow the team you can have security personnel attending these ceremonies, looking to bring a security point of view to the proceedings. You can drop tickets into Jira, push for them to get prioritised, and see some progress being made.</p>
<p>However, your goals are orthogonal to that of the product owner and the development team, they&rsquo;re trying to maximise reward, you&rsquo;re trying to minimise risk. You can look to source <code>Security Champions</code> as a scaling mechanism, have them be the voice and face of the security movement, and this will make some headway towards your goal.</p>
<p>But there is an upper bound to the effectiveness of this approach, you are reliant on finding motivated employees to carry your message, when push comes to shove security will often lose out in a battle for prioritisation. In this model, doing things securely is not the default modus operandi, it&rsquo;s extra effort, time and money. Security mandate is something that comes down from on high, from people who have very little skin in the game as the developer sees it.</p>
<p>How can we change the game such that security is the default? Make it the simplest, easiest and fastest choice?</p>
<h2 id="option-2---add-development-capability-to-security">Option 2 - Add Development Capability To Security</h2>
<p>Google scaled their operations through <a href="https://landing.google.com/sre/books/">SRE</a>, you must do the same with security. Software is the force multiplier of the 21st century. Hyperscaling startups, for all their faults, show how you can have huge impact per person through code. With this leverage you can scale security in a more effective and more cost efficient way than growing the security team with non-coders ever could.</p>
<h3 id="devsecops-pipelines">DevSecOps Pipelines</h3>
<p>DevSecOps is the natural evolution of DevOps, but unfortunately the effort of adding security tools to pipelines is non-zero, which means it falls into the good old fashioned priority queue. CircleCI has a great template with <a href="https://circleci.com/orbs/">orbs</a>, making it trivially easy for people to add extra capabilities to their pipelines. The security team can bring reusable templates to the build pipelines across the organisation by doing the complex work up front, reducing the barrier to entry for development teams and expediting adoption.</p>
<p>Another benefit is giving the security a way of uniformly building standards across the whole swathe of development. As a new standard are mint, you can add a capability to warn development teams that they&rsquo;re in breach, and actually cause failed builds if the concerns are not addressed in time. By building in a rapid and consistent feedback loop into the process, better security behaviours will result.</p>
<h3 id="improved-base-infrastructure">Improved Base Infrastructure</h3>
<p>Infrastructure in the cloud is a composition of foundational components, and for better or worse the default posture on most resources is open. Historically, building secure cloud applications was something that took significant expertise and the paying of something akin to a blood-debt to unlock the arcanery of YAML templating. However, we now have the tools to enable secure by default and to empower all developers to deliver fit for purpose architectures.</p>
<p>Through constructing a repository of secure by default components, the security team can change the underlying foundation of all architectures. By enabling the delivery teams to frictionlessly adopt secure components, the security posture will organically improve as the delivery teams are better served by the provided templates.</p>
<h2 id="the-decision">The Decision</h2>
<p>Given a blank slate, both options will be beneficial to an organisation. By adopting option 1 you will bring greater security awareness and will hopefully build up champions within the development team to drive secure practices. However, this approach maintains silos and can potentially result in high levels of animosity between development and security.</p>
<p>By adopting option 2 along with the advocacy portion of option 1, you have a solution where security outputs drive engineering outcomes, which drive security outcomes. This flow provides a more consistent adoption curve and promotes sybmiosis over silos.</p>
]]></content>
		</item>
		
	</channel>
</rss>
