<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lambda on Josh Armitage</title>
    <link>https://josharmi.github.io/tags/lambda/</link>
    <description>Recent content in Lambda on Josh Armitage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 06 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://josharmi.github.io/tags/lambda/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Three Tips For Lambda Layers</title>
      <link>https://josharmi.github.io/posts/lambda-layers/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://josharmi.github.io/posts/lambda-layers/</guid>
      <description>The Three Tips  Consider and manage your layer lifecycle Don&amp;rsquo;t prematurely optimise Consider different ways to decompose  What Is A Lambda Layer? Layers are a mechanism by which you can have common code available to an array of AWS lambda functions. They&amp;rsquo;re a simple enough thing to set up:
MyLayer: Type: &amp;quot;AWS::Lambda::LayerVersion&amp;quot; Properties: Description: Common code for reuse LayerName: CommonCodeLayer CompatibleRuntimes: - python3.7 Content: layer Then you can use it in a serverless function by:</description>
    </item>
    
  </channel>
</rss>